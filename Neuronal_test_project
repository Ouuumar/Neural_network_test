{"cells":[{"cell_type":"markdown","source":"# NN Project LAB 3","metadata":{"tags":[],"cell_id":"00000-f8d36bc3-5152-4771-9251-223fae6016ee","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00000-53d8924f-8dac-4f64-a7aa-86d49534e345","deepnote_to_be_reexecuted":false,"source_hash":"2843eb0","execution_millis":747,"execution_start":1610057674375,"deepnote_cell_type":"code"},"source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom random import randint\n","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Data Processing and Exploration","metadata":{"tags":[],"cell_id":"00002-43d97e8a-51a0-4d6f-ad23-a37615f855c7","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00001-21143213-d8be-4e7e-8be7-be6a88ac0ad4","deepnote_to_be_reexecuted":false,"source_hash":"22eb2726","execution_millis":1215,"execution_start":1610057675126,"deepnote_cell_type":"code"},"source":"X = np.loadtxt('/work/features.txt', delimiter = ',') #features variables\ny = np.loadtxt('/work/labels.txt') #labels variable\nprint(\"features shape :\", X.shape)\nprint(\"labels shape :\", y.shape)\nprint(\"labels unique values :\", np.unique(y))","execution_count":null,"outputs":[{"name":"stdout","text":"features shape : (5000, 400)\nlabels shape : (5000,)\nlabels unique values : [ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]\n","output_type":"stream"}]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00004-5fc723f7-57a5-4290-8e74-c54408896844","deepnote_to_be_reexecuted":false,"source_hash":"f421041b","execution_millis":2,"execution_start":1610057676345,"deepnote_cell_type":"code"},"source":"y = y.reshape((5000, 1)).astype(int)\nprint(\"labels shape :\", y.shape)","execution_count":null,"outputs":[{"name":"stdout","text":"labels shape : (5000, 1)\n","output_type":"stream"}]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00004-e3b0d112-bcbe-4280-a144-785d96df276b","deepnote_to_be_reexecuted":false,"source_hash":"602a11f5","execution_millis":116,"execution_start":1610057676350,"deepnote_cell_type":"code"},"source":"y[y == 10] = 0  #Replacing 10 by 0\nprint(\"labels unique values :\", np.unique(y))\nplt.hist(y,10)\nplt.show()\n","execution_count":null,"outputs":[{"name":"stdout","text":"labels unique values : [0 1 2 3 4 5 6 7 8 9]\n","output_type":"stream"},{"data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","source":"There's an equal distribution of labels's values","metadata":{"tags":[],"cell_id":"00005-b995a208-34a1-4acb-9d6f-0fbb1e8a5f86","deepnote_cell_type":"markdown"}},{"cell_type":"markdown","source":"# Viewing the data","metadata":{"tags":[],"cell_id":"00007-2981d3fc-3212-442a-843a-bf253416ac8c","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00008-2b92b506-8924-4dd5-8778-4adf5e377fd6","deepnote_to_be_reexecuted":false,"source_hash":"6e091352","execution_millis":741,"execution_start":1610057704037,"deepnote_cell_type":"code"},"source":"\n\nfig = plt.figure(figsize=(20,5))\n\nfor a in range(rows*cols):\n    axes.append(fig.add_subplot(rows, cols, a+1))\n    i = np.random.randint(X.shape[0])\n    label_Value = (y[i][0])\n    subplot_title = (\"Label value : \" + str(label_Value))\n    axes[-1].set_title(subplot_title) # Axis up label is -1\n    plt.imshow(X[i].reshape((20, 20)).T, cmap='Blues') # 20*20 for 400 size","execution_count":null,"outputs":[{"data":{"text/plain":"<Figure size 1440x360 with 10 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","source":"# From scratch implementation     ","metadata":{"tags":[],"cell_id":"00009-9d51c940-eda1-4631-b3c3-127efd53e2d6","deepnote_cell_type":"markdown"}},{"cell_type":"markdown","source":"## Separate the dataset : Train Test Split Dataset","metadata":{"tags":[],"cell_id":"00009-da0f6168-5d76-4db4-812d-5ce4efc15d63","deepnote_cell_type":"markdown"}},{"cell_type":"markdown","source":"Since the data is classified in numerical order we use the random state to ensure that the random numbers are generated in the same order.","metadata":{"tags":[],"cell_id":"00010-1f9cd6c0-7ac0-4e23-997e-3e52b821199b","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00011-22ab4052-8175-4356-8d6b-d9f0ca085fc4","deepnote_to_be_reexecuted":false,"execution_millis":209,"output_cleared":false,"source_hash":"a6975819","execution_start":1610057710033,"deepnote_cell_type":"code"},"source":"Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size = 0.35, random_state = 2)\n#to ensure that the repartition was well randomized we plot the different repartitions\nplt.title(\"Train repartition\")\nplt.hist(ytrain, 10)\nplt.show()\nplt.title(\"Test repartition\")\nplt.hist(ytest,10)\nplt.show()\n","execution_count":null,"outputs":[{"data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"},"output_type":"display_data"},{"data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","source":"","metadata":{"tags":[],"cell_id":"00014-6dcac964-af2e-4370-88d3-a3f1bb778183","deepnote_cell_type":"markdown"}},{"cell_type":"markdown","source":"Defining numbers of units in each layers","metadata":{"tags":[],"cell_id":"00014-c3994e91-4621-43e6-a915-3b6cf110ce6b","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00017-634b8a2d-c6cb-40aa-87ba-2a14c6d210d7","deepnote_to_be_reexecuted":false,"source_hash":"57cb9507","execution_millis":0,"execution_start":1610058494857,"deepnote_cell_type":"code"},"source":"layer_1 = 401 #input layer\nlayer_2 = 3250 #hidden layer 1\nlayer_3 = 401 #hidden layer 2\nlayer_4 = 10  #ouput layer","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Initiating random weights ","metadata":{"tags":[],"cell_id":"00014-6564b914-5040-4dd1-9a07-48830107b301","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00015-c201c1a3-d697-43ee-a1df-06c61661f55f","deepnote_to_be_reexecuted":false,"source_hash":"21bff1a7","execution_millis":3,"execution_start":1610058495471,"deepnote_cell_type":"code"},"source":"W1 = np.random.random((layer_2,layer_1)) #weight between layer 1 and 2 ( nb neurons * nb output)\nW2 = np.random.random((layer_3,layer_2)) #between layer 2 and 3\nW3 = np.random.random((layer_4,layer_3)) #between layer 3 and 4","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00018-a7f5266d-73bf-489f-8ff2-0af381c0080f","deepnote_to_be_reexecuted":false,"source_hash":"80d86b44","execution_millis":2,"execution_start":1610058495737,"deepnote_cell_type":"code"},"source":"print(W1.shape)","execution_count":null,"outputs":[{"name":"stdout","text":"(401, 401)\n","output_type":"stream"}]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00017-d78b5fa4-bca8-4ecf-9b13-225132895fa7","deepnote_to_be_reexecuted":false,"source_hash":"463a1f00","execution_millis":1,"output_cleared":false,"execution_start":1610058496703,"deepnote_cell_type":"code"},"source":"#getting the number of values in the train test datasets\nn_train = Xtrain.shape[0]\nn_test = Xtest.shape[0]\nprint(\"number of trained values :\",n_train)\nprint(\"number of tested values\",n_test )\n\n","execution_count":null,"outputs":[{"name":"stdout","text":"number of trained values : 3250\nnumber of tested values 1750\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{"tags":[],"cell_id":"00018-13e74ec6-0471-4f74-b374-c4bcdf5cac1a","deepnote_cell_type":"markdown"}},{"cell_type":"markdown","source":"## Defining the forward propagation fonction","metadata":{"tags":[],"cell_id":"00021-01da6398-bc88-44a7-bfae-0081548da36b","deepnote_cell_type":"markdown"}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00022-df9d4732-6e81-477b-9324-7f1f3e5379c3","deepnote_to_be_reexecuted":false,"source_hash":"3f0f8786","execution_millis":1,"execution_start":1610058478455,"deepnote_cell_type":"code"},"source":"#we choose a sigmoïd as an activation function for each layer\ndef sigmoid(X):\n    return 1 / (1 + np.exp(-X))\n","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00022-06b08d32-2abf-406c-8a9a-ff2c8794fdd7","deepnote_to_be_reexecuted":false,"source_hash":"410c56b1","execution_millis":3,"execution_start":1610058478808,"deepnote_cell_type":"code"},"source":"def forward_prop(x):\n  #bias unit added to the input layer\n  x_bias = np.append(np.ones((n_train, 1), dtype=float), x, axis=1)\n  print(x_bias.T.shape)\n\n  # First hidden layer\n  Z1 = W1.dot(x_bias.T)\n  a1 = sigmoid(Z1)\n  a1_bias = np.append(np.ones((n_train, 1), dtype=float), a1, axis=1)\n\n  # 2nd hidden layer\n  Z2 = W2.dot(a1_bias)\n  a2 = sigmoid(Z2)\n  a2_bias = np.append(np.ones((n_train, 1), dtype=float), a2, axis=1)\n\n\n  #3rd layer (output layer)\n  Z3 = W3.dot(a2) + b3\n  Y = sigmoid(Z3)\n  \n\n  return x, Z1, a1_bias, Z2, a2_bias, Z3, Y","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00023-0d7c2ca3-baec-4669-8336-c14e6bbe4a0d","deepnote_to_be_reexecuted":false,"source_hash":"b623e53d","execution_millis":2,"output_cleared":true,"execution_start":1610111791368,"deepnote_cell_type":"code"},"source":"print(forward_prop(Xtrain))","execution_count":0,"outputs":[]}],"nbformat":4,"nbformat_minor":2,"metadata":{"orig_nbformat":2,"deepnote_notebook_id":"63284224-077f-4fdb-b2af-2280e9110204","deepnote_execution_queue":[]}}